/**
 * Simple validation demo to verify integration layer functionality
 */

// Mock Office.js for demonstration
const mockOffice = {
  context: {
    mailbox: {
      item: {
        itemType: 'Message',
        itemClass: 'IPM.Note',
        to: {
          addHandlerAsync: (eventType: string, handler: Function, callback: Function) => {
            setTimeout(() => callback({ status: 'Succeeded' }), 10);
          },
          removeHandlerAsync: (eventType: string, handler: Function) => {},
          getAsync: (callback: Function) => {
            setTimeout(() => callback({ 
              status: 'Succeeded', 
              value: [{ emailAddress: 'john.doe@example.com', displayName: 'John Doe' }] 
            }), 10);
          }
        },
        cc: {
          addHandlerAsync: (eventType: string, handler: Function, callback: Function) => {
            setTimeout(() => callback({ status: 'Succeeded' }), 10);
          },
          removeHandlerAsync: (eventType: string, handler: Function) => {},
          getAsync: (callback: Function) => {
            setTimeout(() => callback({ status: 'Succeeded', value: [] }), 10);
          }
        },
        bcc: {
          addHandlerAsync: (eventType: string, handler: Function, callback: Function) => {
            setTimeout(() => callback({ status: 'Succeeded' }), 10);
          },
          removeHandlerAsync: (eventType: string, handler: Function) => {},
          getAsync: (callback: Function) => {
            setTimeout(() => callback({ status: 'Succeeded', value: [] }), 10);
          }
        },
        body: {
          addHandlerAsync: (eventType: string, handler: Function, callback: Function) => {
            setTimeout(() => callback({ status: 'Succeeded' }), 10);
          },
          removeHandlerAsync: (eventType: string, handler: Function) => {},
          getAsync: (coercionType: string, callback: Function) => {
            setTimeout(() => callback({ 
              status: 'Succeeded', 
              value: 'Hi John,\n\nHow are you doing?\n\nBest regards,\nAlice' 
            }), 10);
          }
        }
      }
    }
  },
  EventType: {
    RecipientsChanged: 'RecipientsChanged',
    AppointmentTimeChanged: 'AppointmentTimeChanged'
  },
  AsyncResultStatus: {
    Succeeded: 'Succeeded',
    Failed: 'Failed'
  },
  CoercionType: {
    Text: 'Text'
  },
  MailboxEnums: {
    ItemType: {
      Message: 'Message'
    }
  }
};

(global as any).Office = mockOffice;

import { OutlookIntegration, ValidationEventHandler } from './office-integration';
import { ValidationOrchestratorImpl, OrchestratorEventHandler } from './validation-orchestrator';
import { OfficeErrorHandler } from './error-handler';

/**
 * Demo validation event handler
 */
class DemoEventHandler implements ValidationEventHandler, OrchestratorEventHandler {
  onValidationComplete(results: any[]): void {
    console.log('‚úì Validation completed with', results.length, 'results');
  }

  onValidationError(error: Error): void {
    console.log('‚úó Validation error:', error.message);
  }

  onRecipientsChanged(recipients: any[]): void {
    console.log('üìß Recipients changed:', recipients.length, 'recipients');
  }

  onContentChanged(content: string): void {
    console.log('üìù Content changed, length:', content.length);
  }

  onValidationStarted(): void {
    console.log('üîç Validation started...');
  }
}

/**
 * Run integration demo
 */
async function runDemo() {
  console.log('üöÄ Starting Office.js Integration Demo\n');

  try {
    // Test 1: Office Integration
    console.log('1. Testing OutlookIntegration...');
    const eventHandler = new DemoEventHandler();
    const integration = new OutlookIntegration(eventHandler);

    await integration.initialize();
    console.log('‚úì Integration initialized');

    const isComposing = integration.isComposing();
    console.log('‚úì Is composing:', isComposing);

    const recipients = await integration.getCurrentRecipients();
    console.log('‚úì Got recipients:', recipients.length);

    const emailBody = await integration.getCurrentEmailBody();
    console.log('‚úì Got email body, length:', emailBody.length);

    const validationState = integration.getValidationState();
    console.log('‚úì Got validation state, enabled:', validationState.isEnabled);

    // Test 2: Validation Orchestrator
    console.log('\n2. Testing ValidationOrchestrator...');
    const orchestrator = new ValidationOrchestratorImpl(eventHandler);

    await orchestrator.initialize();
    console.log('‚úì Orchestrator initialized');

    const isValidating = orchestrator.isValidationInProgress();
    console.log('‚úì Is validating:', isValidating);

    // Test caching
    orchestrator.onRecipientsChanged(recipients);
    orchestrator.onContentChanged(emailBody);
    console.log('‚úì Caching tested');

    // Test 3: Error Handler
    console.log('\n3. Testing OfficeErrorHandler...');
    
    OfficeErrorHandler.validateOfficeContext();
    console.log('‚úì Office context validated');

    OfficeErrorHandler.validatePermissions();
    console.log('‚úì Permissions validated');

    const successResult = {
      status: mockOffice.AsyncResultStatus.Succeeded,
      value: 'test'
    };
    const value = OfficeErrorHandler.handleAsyncResult(successResult as any, 'test');
    console.log('‚úì Async result handled:', value);

    const userMessage = OfficeErrorHandler.getUserFriendlyMessage(new Error('Test'));
    console.log('‚úì User-friendly message:', userMessage.substring(0, 50) + '...');

    // Clean up
    integration.dispose();
    orchestrator.dispose();

    console.log('\nüéâ All integration tests passed successfully!');

  } catch (error) {
    console.error('\n‚ùå Demo failed:', error);
    process.exit(1);
  }
}

// Run the demo
runDemo();